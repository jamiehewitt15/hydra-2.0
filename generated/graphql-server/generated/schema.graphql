interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

""" Tracks block timestamps """
type BlockTimestamp implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type BlockTimestampConnection {
  totalCount: Int!
  edges: [BlockTimestampEdge!]!
  pageInfo: PageInfo!
}

input BlockTimestampCreateInput {
  blockNumber: BigInt!
  timestamp: BigInt!
}

type BlockTimestampEdge {
  node: BlockTimestamp!
  cursor: String!
}

enum BlockTimestampOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  blockNumber_ASC
  blockNumber_DESC
  timestamp_ASC
  timestamp_DESC
}

input BlockTimestampUpdateInput {
  blockNumber: BigInt
  timestamp: BigInt
}

input BlockTimestampWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  blockNumber_eq: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  timestamp_eq: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
}

input BlockTimestampWhereUniqueInput {
  id: ID!
}

"""GraphQL representation of Bytes"""
scalar Bytes

type CommentSearchFTSOutput {
  item: CommentSearchSearchResult!
  rank: Float!
  isTypeOf: String!
  highlight: String!
}

union CommentSearchSearchResult = Transfer

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  blockTimestamps(offset: Int, limit: Int = 50, where: BlockTimestampWhereInput, orderBy: BlockTimestampOrderByInput): [BlockTimestamp!]!
  blockTimestamp(where: BlockTimestampWhereUniqueInput!): BlockTimestamp
  blockTimestampsConnection(first: Int, after: String, last: Int, before: String, where: BlockTimestampWhereInput, orderBy: BlockTimestampOrderByInput): BlockTimestampConnection!
  commentSearch(whereTransfer: TransferWhereInput, skip: Int = 0, limit: Int = 5, text: String!): [CommentSearchFTSOutput!]!
  transfers(offset: Int, limit: Int = 50, where: TransferWhereInput, orderBy: TransferOrderByInput): [Transfer!]!
  transfer(where: TransferWhereUniqueInput!): Transfer
  transfersConnection(first: Int, after: String, last: Int, before: String, where: TransferWhereInput, orderBy: TransferOrderByInput): TransferConnection!
}

type StandardDeleteResponse {
  id: ID!
}

""" All transfers """
type Transfer implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  comment: String
  block: Int!
  insertedAt: DateTime!
}

type TransferConnection {
  totalCount: Int!
  edges: [TransferEdge!]!
  pageInfo: PageInfo!
}

input TransferCreateInput {
  from: Bytes!
  to: Bytes!
  value: BigInt!
  comment: String
  block: Float!
  insertedAt: DateTime!
}

type TransferEdge {
  node: Transfer!
  cursor: String!
}

enum TransferOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  value_ASC
  value_DESC
  comment_ASC
  comment_DESC
  block_ASC
  block_DESC
  insertedAt_ASC
  insertedAt_DESC
}

input TransferUpdateInput {
  from: Bytes
  to: Bytes
  value: BigInt
  comment: String
  block: Float
  insertedAt: DateTime
}

input TransferWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  from_eq: Bytes
  from_in: [Bytes!]
  to_eq: Bytes
  to_in: [Bytes!]
  value_eq: BigInt
  value_gt: BigInt
  value_gte: BigInt
  value_lt: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  comment_eq: String
  comment_contains: String
  comment_startsWith: String
  comment_endsWith: String
  comment_in: [String!]
  block_eq: Int
  block_gt: Int
  block_gte: Int
  block_lt: Int
  block_lte: Int
  block_in: [Int!]
  insertedAt_eq: DateTime
  insertedAt_lt: DateTime
  insertedAt_lte: DateTime
  insertedAt_gt: DateTime
  insertedAt_gte: DateTime
}

input TransferWhereUniqueInput {
  id: ID!
}
