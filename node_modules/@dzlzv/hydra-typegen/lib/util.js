"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pushToDictionary = exports.formatWithPrettier = exports.writeFile = exports.readJson = exports.readFile = exports.readTemplate = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const prettier_1 = tslib_1.__importDefault(require("prettier"));
const log = require('debug')('hydra-typegen:util');
function readTemplate(template) {
    return fs_1.default
        .readFileSync(path_1.default.join(__dirname, `./templates/${template}.hbs`))
        .toString();
}
exports.readTemplate = readTemplate;
function readFile(source) {
    const location = path_1.default.resolve(source);
    log(`Reading: ${location}`);
    return fs_1.default.readFileSync(location, 'utf-8');
}
exports.readFile = readFile;
function readJson(source) {
    return JSON.parse(readFile(source));
}
exports.readJson = readJson;
function writeFile(dest, generator) {
    log(`${dest}\n\tGenerating`);
    let generated = generator();
    while (generated.includes('\n\n\n')) {
        generated = generated.replace(/\n\n\n/g, '\n\n');
    }
    fs_1.default.writeFileSync(dest, generated);
}
exports.writeFile = writeFile;
const prettierOptions = {
    parser: 'typescript',
    endOfLine: 'auto',
};
function formatWithPrettier(text, options = prettierOptions) {
    let formatted = '';
    try {
        formatted = prettier_1.default.format(text, options);
    }
    catch (error) {
        console.error('There were some errors while formatting with Prettier', error);
        formatted = text;
    }
    return formatted;
}
exports.formatWithPrettier = formatWithPrettier;
function pushToDictionary(dict, key, ...values) {
    if (dict[key] === undefined) {
        dict[key] = [...values];
    }
    else {
        dict[key].push(...values);
    }
}
exports.pushToDictionary = pushToDictionary;
