import { Command, flags } from '@oclif/command';
import { MetadataSource } from '../../metadata/metadata';
import { GeneratorConfig } from '../../generators';
export declare type CustomTypes = {
    lib: string;
    typedefsLoc: string;
};
export interface IConfig {
    metadata: MetadataSource;
    events: string[];
    calls: string[];
    customTypes?: CustomTypes;
    outDir: string;
    strict?: boolean;
}
export declare type Flags = {
    events: string | undefined;
    calls: string | undefined;
    metadata: string;
    blockHash: string | undefined;
    typedefs: string | undefined;
    typelib: string | undefined;
    outDir: string;
    strict: boolean;
    debug: boolean;
};
export default class Typegen extends Command {
    static description: string;
    static usage: string;
    static args: {
        name: string;
        optional: boolean;
        description: string;
    }[];
    static flags: {
        events: flags.IOptionFlag<string | undefined>;
        calls: flags.IOptionFlag<string | undefined>;
        metadata: flags.IOptionFlag<string>;
        blockHash: flags.IOptionFlag<string | undefined>;
        typedefs: flags.IOptionFlag<string | undefined>;
        typelib: flags.IOptionFlag<string | undefined>;
        outDir: flags.IOptionFlag<string>;
        strict: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        debug: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    run(): Promise<void>;
    parseFlags(flags: Flags): IConfig;
    buildGeneratorConfig(config: IConfig): Promise<GeneratorConfig>;
    generate(config: IConfig): Promise<void>;
}
