import { Option, Vec } from '@polkadot/types/codec';
import { Text } from '@polkadot/types/primitive';
import { Codec } from '@polkadot/types/types';
export declare type Arg = {
    type: Text;
    name: Text;
} & Codec;
export declare type Call = {
    args: Vec<Arg>;
    name: Text;
    documentation?: Vec<Text>;
} & Codec;
export declare type Calls = Option<Vec<Call>>;
export declare type Event = {
    args: Vec<Text>;
    documentation?: Vec<Text>;
    name: Text;
} & Codec;
export declare type ModuleMeta = {
    module: Module;
    events: Event[];
    calls: Call[];
    types: string[];
};
export declare type Events = Option<Vec<Event>>;
export declare type Module = {
    module?: {
        call: {
            functions: Vec<Call>;
        };
    };
    name: Text;
    calls?: Calls;
    constants?: Vec<{
        type: Text;
    } & Codec>;
    events?: Events;
} & Codec;
export interface ExtractedMetadata {
    modules: Vec<Module>;
    outerEvent?: {
        events: Vec<[Text, Vec<Event>] & Codec>;
    };
}
export declare type TypeDefs = Record<string, string | Record<string, string> | {
    _enum: string[] | Record<string, string | null>;
} | {
    _set: Record<string, number>;
}>;
export declare function weakEquals(s1: string | Text, s2: string | Text): boolean;
