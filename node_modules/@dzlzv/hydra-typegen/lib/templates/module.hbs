import { createTypeUnsafe } from "@polkadot/types/create";
import { SubstrateEvent, SubstrateExtrinsic } from "@dzlzv/hydra-common";
import { Codec } from "@polkadot/types/types";
import { typeRegistry } from ".";

{{{imports}}}

export namespace {{module.name}} {
{{#each events}}
    {{#if documentation}}
    /**
    {{#each documentation}}
     * {{{this}}}
    {{/each}}
     *
     *  Event parameters: [{{#each args}}{{{this}}}, {{/each}}]
     */
    {{/if}}
    export class {{name}}Event {
        public readonly expectedParamTypes = [{{#each args}}'{{{this}}}', {{/each}}]

        constructor(public readonly ctx: SubstrateEvent) {}

        get data(): {{name}}_Params {
            
            {{#if @root.validateArgs}}
            if (!this.validateParams()) {
                throw new Error(`Expected event parameters of types [${this.expectedParamTypes.join(',')}] but received [${this.ctx.params.map((p) => p.type).join(',')}]`)
            }
            {{/if}}

            return new {{name}}_Params(this.ctx)
        }

        validateParams(): boolean {
            if (this.expectedParamTypes.length !== this.ctx.params.length) {
                return false
            }
            let valid = true
            this.expectedParamTypes.forEach((type, i) => {
                if (type !== this.ctx.params[i].type) {
                    valid = false
                }
            })
            return valid
        }

    }     

    class {{name}}_Params {
    
        constructor(public readonly ctx: SubstrateEvent) {}

        {{{getters}}}
        
    }
{{/each}}

{{#each calls}}
    {{#if documentation}}
    /**
    {{#each documentation}}
     * {{{this}}}
    {{/each}}
     */
    {{/if}}
    export class {{pascalCase name}}Call {
        public readonly extrinsic: SubstrateExtrinsic
        public readonly expectedArgTypes = [{{#each args}}'{{{toString type}}}', {{/each}}]

        constructor(public readonly ctx: SubstrateEvent) {
            if (ctx.extrinsic === undefined) {
                throw new Error(`No call data has been provided`)
            }
            this.extrinsic = ctx.extrinsic
        }

        get args(): {{pascalCase name}}_Args {
            {{#if @root.validateArgs}}
            if (!this.validateArgs()) {
                throw new Error(`Expected the call arguments of types [${this.expectedArgTypes.join(',')}] but received [${this.extrinsic.args((p) => p.type).join(',')}]`)
            }
            {{/if}}
            return new {{pascalCase name}}_Args(this.extrinsic)
        }

        validateArgs(): boolean {
            if (this.expectedArgTypes.length !== this.extrinsic.args.length) {
                return false
            }
            let valid = true
            this.expectedArgTypes.forEach((type, i) => {
                if (type !== this.extrinsic.args[i].type) {
                    valid = false
                }
            })
            return valid
        }
    }

    class {{pascalCase name}}_Args {
    
        constructor(public readonly extrinsic: SubstrateExtrinsic) {}

        {{{getters}}}
        
    }
{{/each}}

}