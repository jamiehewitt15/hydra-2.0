"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
const model_1 = require("./model");
const fs = tslib_1.__importStar(require("fs-extra"));
const FTSQueryRenderer_1 = require("../../src/generate/FTSQueryRenderer");
const chai = tslib_1.__importStar(require("chai"));
const chaiSnapshot = require('mocha-chai-snapshot');
const { expect } = chai;
chai.use(chaiSnapshot);
describe('FTSQueryRenderer', () => {
    let generator;
    before(() => {
        // set timestamp in the context to make the output predictable
        generator = new FTSQueryRenderer_1.FTSQueryRenderer({ ts: 111111111 });
    });
    it('Should generate migration', function () {
        const warthogModel = model_1.createModel();
        warthogModel.addQueryClause('test1', 'initial_body_text', 'Post');
        warthogModel.addQueryClause('test1', 'title', 'Post');
        warthogModel.addQueryClause('test1', 'initial_body_text', 'Thread');
        warthogModel.addQueryClause('test1', 'title', 'Thread');
        const templateData = fs.readFileSync('./src/templates/textsearch/migration.ts.mst', 'utf-8');
        const transformed = generator.generate(templateData, warthogModel.lookupQuery('test1'));
        expect(transformed).to.matchSnapshot(this);
    });
    it(`Should add filter options to fts resolver`, () => {
        const warthogModel = model_1.createModel();
        warthogModel.addQueryClause('search', 'title', 'Post');
        const resolverTemplate = fs.readFileSync('./src/templates/textsearch/resolver.ts.mst', 'utf-8');
        const rendered = generator.generate(resolverTemplate, warthogModel.lookupQuery(`search`));
        expect(rendered).to.include(`import {  PostWhereInput,  } from '../../../generated'`);
        expect(rendered).to.include(`@Arg('skip', () => Int, { defaultValue: 0 }) skip: number`);
        expect(rendered).to.include(`@Arg('wherePost', { nullable: true }) wherePost?: PostWhereInput`);
    });
    it(`Should add filter options to fts service`, () => {
        const warthogModel = model_1.createModel();
        warthogModel.addQueryClause('search', 'title', 'Post');
        const resolverTemplate = fs.readFileSync('./src/templates/textsearch/service.ts.mst', 'utf-8');
        const rendered = generator.generate(resolverTemplate, warthogModel.lookupQuery(`search`));
        expect(rendered).to.include(`@Inject('PostService')`);
        expect(rendered).to.include(`skip = 0`);
        expect(rendered).to.include(`wherePost?: PostWhereInput`);
        expect(rendered).to.include(`[text, limit, skip]`);
        expect(rendered).to.include(`private async processWheres(wheres: any[]): Promise<[string, any[], number]>`);
        expect(rendered).to.include(`AND unique_id IN (SELECT unique_id FROM selected_ids)`);
    });
});
