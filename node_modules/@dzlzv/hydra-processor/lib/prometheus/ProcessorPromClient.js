"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessorPromClient = void 0;
const tslib_1 = require("tslib");
const prom_client_1 = require("prom-client");
const hydra_common_1 = require("@dzlzv/hydra-common");
const debug_1 = tslib_1.__importDefault(require("debug"));
const db_1 = require("../db");
const events_1 = require("../start/events");
const config_1 = require("../start/config");
const debug = debug_1.default('index-builder:processor-prom-client');
class ProcessorPromClient {
    constructor() {
        this.lastScannedBlock = new prom_client_1.Gauge({
            name: 'hydra_processor_last_scanned_block',
            help: 'Last block the processor has scanned for events',
        });
        this.processedEvents = new prom_client_1.Gauge({
            name: 'hydra_processor_processed_events_cnt',
            help: 'total number of processed events',
            labelNames: ['name'],
        });
    }
    init() {
        prom_client_1.collectDefaultMetrics({ prefix: 'hydra_processor_system_' });
        this.initValues()
            .then(() => {
            events_1.eventEmitter.on(events_1.STATE_CHANGE, (state) => {
                this.lastScannedBlock.set(state.lastScannedBlock);
            });
            events_1.eventEmitter.on(events_1.PROCESSED_EVENT, (event) => {
                this.processedEvents.inc();
                this.processedEvents.inc({ name: event.name });
            });
        })
            .catch((e) => debug(`Error initializing the values: ${hydra_common_1.logError(e)}`));
    }
    async initValues() {
        const totalEvents = await db_1.countProcessedEvents(config_1.conf.NAME);
        this.processedEvents.set(totalEvents);
    }
}
exports.ProcessorPromClient = ProcessorPromClient;
//# sourceMappingURL=ProcessorPromClient.js.map