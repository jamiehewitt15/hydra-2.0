"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const manifest_1 = require("./manifest");
describe('manifest', () => {
    it('parses block intervals', () => {
        const empty = manifest_1.parseBlockInterval(undefined);
        chai_1.expect(empty.from).equals(0);
        chai_1.expect(empty.to).equals(Number.MAX_SAFE_INTEGER);
        const left = manifest_1.parseBlockInterval('[42,]');
        chai_1.expect(left).not.to.be.an('undefined');
        chai_1.expect(left.from).equals(42, 'should read the from block');
        chai_1.expect(left.to).equals(Number.MAX_SAFE_INTEGER);
        const right = manifest_1.parseBlockInterval('[,42]');
        chai_1.expect(right).not.to.be.an('undefined');
        chai_1.expect(right.to).equals(42, 'should read the to block');
        chai_1.expect(right.from).equals(0);
        const both = manifest_1.parseBlockInterval(' [ 2 , 42 ] ');
        chai_1.expect(both).not.to.be.an('undefined');
        chai_1.expect(both.from).equals(2, 'should read the from block');
        chai_1.expect(both.to).equals(42, 'should read the from block');
    });
    it('parses handlers', () => {
        const { name, argTypes } = manifest_1.parseHandlerDef('balancesTransfer(DatabaseManager, SubstrateEvent) ');
        chai_1.expect(name).equals('balancesTransfer');
        chai_1.expect(argTypes).contains('DatabaseManager');
        chai_1.expect(argTypes).contains('SubstrateEvent');
        chai_1.expect(argTypes.length).equals(2);
    });
    it('infers default handler names', () => {
        const { name, argTypes } = manifest_1.inferDefault('Balances.Transfer', 'Event');
        chai_1.expect(name).equals('balances_TransferEvent');
        chai_1.expect(argTypes).contains('DatabaseManager');
        chai_1.expect(argTypes).contains('Balances.TransferEvent');
        chai_1.expect(argTypes.length).equals(2);
    });
    it('validate handler args', () => {
        chai_1.expect(() => manifest_1.validateArgTypes({
            handler: 'test',
            argTypes: ['DatabaseManager', 'DatabaseManager'],
        })).to.throw('multiple arguments');
        chai_1.expect(() => manifest_1.validateArgTypes({
            handler: 'test',
            argTypes: ['DatabaseManager', 'XEvent', 'YEvent'],
        })).to.throw('multiple arguments of event type');
        chai_1.expect(() => manifest_1.validateArgTypes({
            handler: 'test',
            argTypes: ['DatabaseManager', 'XCall', 'YCall'],
        })).to.throw('multiple arguments of call type');
    });
    it('Parse handler definitions', () => {
        chai_1.expect(manifest_1.parseHandlerDef('test()').argTypes.length).to.equal(0, 'Should parse empty arg list');
    });
});
//# sourceMappingURL=manifest.spec.js.map