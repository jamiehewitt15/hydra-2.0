"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessorRunner = void 0;
const tslib_1 = require("tslib");
const MappingsProcessor_1 = require("../process/MappingsProcessor");
const debug_1 = tslib_1.__importDefault(require("debug"));
const hydra_common_1 = require("@dzlzv/hydra-common");
const console_1 = require("console");
const dal_1 = require("../db/dal");
const prometheus_1 = require("../prometheus");
const config_1 = require("./config");
const log_1 = require("../util/log");
const p_wait_for_1 = tslib_1.__importDefault(require("p-wait-for"));
const debug = debug_1.default('hydra-processor:runner');
// Respondible for creating, starting up and shutting down the query node.
// Currently this class is a bit thin, but it will almost certainly grow
// as the integration logic between the library types and the application
// evolves, and that will pay abstraction overhead off in terms of testability of otherwise
// anonymous code in root file scope.
class ProcessorRunner {
    constructor() {
        // TODO: a bit hacky, but okay for now
        debug(`Hydra processor lib version: ${process.env.npm_package_dependencies__dzlzv_hydra_processor || 'UNKNOWN'}`);
        // Hook into application
        // eslint-disable-next-line
        process.on('exit', () => this.shutDown().catch((e) => console_1.log(`${hydra_common_1.logError(e)}`)));
        process.on('SIGINT', () => this.shutDown().catch((e) => console_1.log(`${hydra_common_1.logError(e)}`)));
    }
    /**
     * Starts the mappings processor
     *
     * @param options options passed to create the mappings
     */
    async process() {
        const manifest = config_1.getManifest();
        log_1.info('Establishing a database connection');
        this.connection = await dal_1.createDBConnection(manifest.entities);
        this.processor = new MappingsProcessor_1.MappingsProcessor();
        try {
            const promClient = new prometheus_1.ProcessorPromClient();
            promClient.init();
            this.promServer = prometheus_1.startPromEndpoint();
        }
        catch (e) {
            log_1.error(`Can't start Prometheus endpoint: ${hydra_common_1.logError(e)}`);
        }
        await this.processor.start();
    }
    async shutDown() {
        if (this.processor) {
            this.processor.stop();
            await p_wait_for_1.default(() => this.processor.stopped);
        }
        if (this.connection && this.connection.isConnected) {
            log_1.info('Closing the database connection...');
            await this.connection.close();
            debug('Done closing the connection');
        }
        if (this.promServer) {
            this.promServer.close();
        }
        debug(`Exiting`);
        // force all pending promises and open ports to exit
        process.exit();
    }
}
exports.ProcessorRunner = ProcessorRunner;
//# sourceMappingURL=ProcessorRunner.js.map