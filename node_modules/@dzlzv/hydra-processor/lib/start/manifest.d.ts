import { HandlerFunc } from './QueryEventProcessingPack';
export declare const STORE_CLASS_NAME = "DatabaseManager";
export declare const CONTEXT_CLASS_NAME = "SubstrateEvent";
export declare const EVENT_SUFFIX = "Event";
export declare const CALL_SUFFIX = "Call";
export interface DataSource {
    kind: string;
    chain: string;
    indexerVersion: string;
}
export interface MappingsDef {
    hydraCommonVersion: string;
    mappingsModule: Record<string, unknown>;
    imports: string[];
    blockInterval: BlockInterval;
    eventHandlers: Record<string, MappingHandler>;
    extrinsicHandlers: Record<string, ExtrinsicHandler>;
    preBlockHooks: MappingHandler[];
    postBlockHooks: MappingHandler[];
}
export interface BlockInterval {
    from: number;
    to: number;
}
export interface MappingHandler {
    handlerFunc: HandlerFunc;
    argTypes: string[];
}
export interface ExtrinsicHandler extends MappingHandler {
    success: boolean;
}
export interface ProcessorManifest {
    version: string;
    entities: string[];
    description?: string;
    repository?: string;
    dataSource: DataSource;
    mappings: MappingsDef;
}
export declare function parseManifest(manifestLoc: string): ProcessorManifest;
export declare function parseHandlerDef(handler: string): {
    name: string;
    argTypes: string[];
};
export declare function validateArgTypes({ handler, argTypes, }: {
    handler: string;
    argTypes: string[];
}): void;
export declare function inferDefault(input: string, suffix?: string): {
    name: string;
    argTypes: string[];
};
export declare function parseBlockInterval(blockInterval: string | undefined): BlockInterval;
