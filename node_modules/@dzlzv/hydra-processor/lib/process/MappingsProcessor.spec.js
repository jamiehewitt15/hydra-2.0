"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hydra_common_1 = require("@dzlzv/hydra-common");
const chai_1 = require("chai");
const _1 = require(".");
const blockInterval2 = {
    from: 3,
    to: 10,
};
const blockWindow = 20;
const globalFilterConfig = {
    blockWindow,
    blockInterval: blockInterval2,
    events: ['event1', 'event2'],
    extrinsics: ['extrinsic1', 'extrinsic2'],
};
describe('MappingsProcessor', () => {
    it('makes an event query based on the current state', () => {
        const context = {
            globalFilterConfig,
            indexerHead: 5,
            state: {
                lastProcessedEvent: undefined,
                lastScannedBlock: 0,
            },
        };
        let nextQuery = _1.nextEventQueries(context)[0];
        chai_1.expect(nextQuery.block_gte).equals(3, 'should take global filter config');
        chai_1.expect(nextQuery.block_lte).equals(5, 'should take indexer head');
        chai_1.expect(nextQuery.events).include('event1', 'should include event names');
        context.indexerHead = 40;
        nextQuery = _1.nextEventQueries(context)[0];
        chai_1.expect(nextQuery.block_lte).equals(10, 'should take global filter config');
    });
    it('creates next state', () => {
        let state = _1.nextState({
            lastProcessedEvent: undefined,
            lastScannedBlock: 0,
        }, [{ block_lte: 5 }, { block_lte: 6 }]);
        chai_1.expect(state.lastProcessedEvent).equals(hydra_common_1.formatEventId(0, 0));
        state = _1.nextState({
            lastProcessedEvent: hydra_common_1.formatEventId(0, 5),
            lastScannedBlock: 4,
        }, [{ block_lte: 5 }, { block_lte: 5 }]);
        chai_1.expect(state.lastProcessedEvent).equals(hydra_common_1.formatEventId(0, 5));
        chai_1.expect(state.lastScannedBlock).equals(0, 'should update last scanned block to the one of the event');
        state = _1.nextState({
            lastProcessedEvent: hydra_common_1.formatEventId(6, 5),
            lastScannedBlock: 4,
        }, [{ block_lte: 5 }, { block_lte: 6 }]);
        chai_1.expect(state.lastScannedBlock).equals(5, 'should update last scanned block to min of block_lte and the of the event');
    });
    // it('updates the state after processing an event', () => {})
});
//# sourceMappingURL=MappingsProcessor.spec.js.map