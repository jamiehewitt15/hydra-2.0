import { IProcessorSource, EventQuery } from '../ingest';
import { HandlerLookupService } from './HandlerLookupService';
import { IProcessorState, IProcessorStateHandler } from '../state';
import { BlockInterval } from '../start/manifest';
export declare class MappingsProcessor {
    protected eventsSource: IProcessorSource;
    protected handlerLookup: HandlerLookupService;
    protected stateHandler: IProcessorStateHandler;
    protected mappings: import("../start/manifest").MappingsDef;
    globalFilterConfig: GlobalFilterConfig;
    state: IProcessorState;
    private _started;
    indexerHead: number;
    constructor(eventsSource?: IProcessorSource, handlerLookup?: HandlerLookupService, stateHandler?: IProcessorStateHandler, mappings?: import("../start/manifest").MappingsDef);
    start(): Promise<void>;
    stop(): void;
    get stopped(): boolean;
    pollIndexer(): Promise<void>;
    private awaitIndexer;
    private processingLoop;
    private shouldWork;
}
export interface GlobalFilterConfig {
    blockWindow: number;
    blockInterval: BlockInterval;
    events: string[];
    extrinsics: string[];
}
export interface ProcessorContext {
    state: IProcessorState;
    indexerHead: number;
    globalFilterConfig: GlobalFilterConfig;
}
export declare function nextState(state: IProcessorState, filter: {
    block_lte: number;
}[]): IProcessorState;
export declare function processEvent(event: {
    id: string;
    blockNumber: number;
}, handler: () => Promise<void>): Promise<IProcessorState>;
export declare function nextEventQueries(context: ProcessorContext): EventQuery[];
