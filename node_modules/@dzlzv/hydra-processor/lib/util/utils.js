"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.quotedJoin = exports.parseEventId = exports.resolvePackageVersion = void 0;
const tslib_1 = require("tslib");
const debug_1 = tslib_1.__importDefault(require("debug"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const debug = debug_1.default('hydra-processor:util');
const PROCESSOR_PACKAGE_NAME = '@dzlzv/hydra-processor';
/**
 * resolve a package version by resolving package.json
 *
 * @param pkgName dependency to loockup
 */
function resolvePackageVersion(pkgName) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const path = require.resolve(`${PROCESSOR_PACKAGE_NAME}/package.json`);
    const pkgJson = JSON.parse(fs_1.default.readFileSync(path, 'utf-8'));
    debug(`Resolved package.json: ${JSON.stringify(pkgJson, null, 2)}`);
    if (pkgName === PROCESSOR_PACKAGE_NAME) {
        return pkgJson.version;
    }
    if (pkgJson.dependencies) {
        const deps = pkgJson.dependencies;
        if (deps[pkgName])
            return deps[pkgName];
    }
    throw new Error(`Can't resolve ${pkgName} version`);
}
exports.resolvePackageVersion = resolvePackageVersion;
function parseEventId(eventId) {
    const parts = eventId.split('-');
    if (parts.length !== 2) {
        throw new Error(`Event ID ${eventId} does not match the format <blockHeight>-<eventId>`);
    }
    return {
        blockHeight: parseInt(parts[0], 10),
        eventId: parseInt(parts[1], 10),
    };
}
exports.parseEventId = parseEventId;
/**
 * Takes each string in the array, puts into quotes and joins with a comma
 * [a,b,c] -> "a","b","c"
 *
 */
function quotedJoin(toQuote) {
    return toQuote.map((s) => `"${s}"`).join();
}
exports.quotedJoin = quotedJoin;
//# sourceMappingURL=utils.js.map