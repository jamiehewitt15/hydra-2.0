import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Copyright 2017-2020 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
import { stringCamelCase } from '@polkadot/util';
import { createUnchecked } from "./createUnchecked.mjs";
import extrinsics from "./index.mjs";
/** @internal */

export function extrinsicsFromMeta(registry, metadata) {
  const modules = metadata.asLatest.modules;
  const isIndexed = modules.some(({
    index
  }) => !index.eqn(255));
  return modules.filter(({
    calls
  }) => calls.isSome).reduce((result, {
    calls,
    index,
    name
  }, _sectionIndex) => {
    const sectionIndex = isIndexed ? index.toNumber() : _sectionIndex;
    const section = stringCamelCase(name);
    result[section] = calls.unwrap().reduce((newModule, callMetadata, methodIndex) => {
      const method = stringCamelCase(callMetadata.name);
      newModule[method] = createUnchecked(registry, section, new Uint8Array([sectionIndex, methodIndex]), callMetadata);
      return newModule;
    }, {});
    return result;
  }, _objectSpread({}, extrinsics));
}